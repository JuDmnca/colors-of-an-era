{"remainingRequest":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/src/App.vue","mtime":1603124927764},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/css-loader/dist/cjs.js","mtime":1603113175720},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1603113182020},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/postcss-loader/src/index.js","mtime":1603113178916},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/sass-loader/dist/cjs.js","mtime":1603113180663},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/cache-loader/dist/cjs.js","mtime":1603113174759},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/vue-loader/lib/index.js","mtime":1603113182020}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgojYXBwIHsKICBmb250LWZhbWlseTogQXZlbmlyLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAjMmMzZTUwOwp9CgojbmF2IHsKICBwYWRkaW5nOiAzMHB4OwoKICBhIHsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgY29sb3I6ICMyYzNlNTA7CgogICAgJi5yb3V0ZXItbGluay1leGFjdC1hY3RpdmUgewogICAgICBjb2xvcjogIzQyYjk4MzsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"container\"></div>\n    <canvas class=\"main-canvas\"></canvas>\n  </div>\n</template>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\n#nav {\n  padding: 30px;\n\n  a {\n    font-weight: bold;\n    color: #2c3e50;\n\n    &.router-link-exact-active {\n      color: #42b983;\n    }\n  }\n}\n</style>\n\n<script>\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeTest',\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null\n    }\n  },\n  methods: {\n    init: function() {\n\n      const canvas = document.querySelector('.main-canvas')\n\n      // Setup Scene\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer({\n          canvas: canvas\n      });\n\n      renderer.setSize(window.innerWidth, window.innerHeight)\n      renderer.setPixelRatio(window.devicePixelRatio)\n\n      window.addEventListener(\"resize\", () => {\n          renderer.setSize(window.innerWidth, window.innerHeight)\n          renderer.setPixelRatio(window.devicePixelRatio)\n      })\n\n      let manager = new THREE.LoadingManager();\n      let textureLoader = new THREE.TextureLoader(manager)\n\n      let material = new THREE.MeshNormalMaterial()\n\n      const loader = new GLTFLoader();\n      loader.load(\n          '/00_TEST.glb',\n          (gltf) => {\n              // called when the resource is loaded\n              console.log(gltf);\n\n              // pointing Mesh\n              let model = gltf.scene.children[0].children[1].children[0]\n              // Overiding Material\n              model.material = material\n              console.log(model);\n\n              model.scale.x = 2\n              model.scale.y = 2\n              model.scale.z = 2\n\n              // Add to scene\n              scene.add(model);\n          },\n      );\n\n      let pointLight = new THREE.PointLight(0xffffff, 1);\n      pointLight.position.x = 10\n      pointLight.position.y = 10\n      scene.add(pointLight);\n\n      let ambientLight = new THREE.AmbientLight(0x111111)\n      scene.add(ambientLight);\n\n      camera.position.z = 200\n      camera.lookAt(new THREE.Vector3(0,0,0))\n\n    },\n    animate: function() {\n        requestAnimationFrame(this.animate);\n        this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted() {\n      this.init();\n      this.animate();\n  }\n}\n</script>\n"]}]}