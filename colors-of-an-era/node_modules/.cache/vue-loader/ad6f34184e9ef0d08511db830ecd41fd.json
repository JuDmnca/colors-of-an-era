{"remainingRequest":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/src/components/Title.vue?vue&type=style&index=0&lang=sass&","dependencies":[{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/src/components/Title.vue","mtime":1603285347874},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/css-loader/dist/cjs.js","mtime":1603113175720},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1603113182020},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/postcss-loader/src/index.js","mtime":1603113178916},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/sass-loader/dist/cjs.js","mtime":1603113180663},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/cache-loader/dist/cjs.js","mtime":1603113174759},{"path":"/Users/juliedemendonca/Documents/_gobelins/colors-of-an-era/colors-of-an-era/node_modules/vue-loader/lib/index.js","mtime":1603113182020}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgouaW50cm9fX3RleHQKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZQogICAgdG9wOiA1MCUKICAgIGxlZnQ6IDUwJQogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpCiAgICBmb250LWZhbWlseTogJ01heml1cycKICAgIGRpc3BsYXk6IGZsZXgKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIKICAgIGgyCiAgICAgICAgY29sb3I6IHdoaXRlCiAgICAgICAgcGFkZGluZzogMTBweAogICAgLmJ1dHRvbgogICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZQogICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2UKICAgICAgICBwYWRkaW5nOiAxNXB4CiAgICAgICAgYm9yZGVyOiAxcHggd2hpdGUgc29saWQKICAgICAgICBib3JkZXItcmFkaXVzOiAzMHB4CiAgICAgICAgY29sb3I6IHdoaXRlCg=="},{"version":3,"sources":["Title.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Title.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class='container'>\n        <canvas class=\"main-canvas\"></canvas>\n        <div class=\"intro__text\">\n            <h2>A visual exploration of color temperature in cinema</h2>\n            <router-link class=\"button\" to=\"/home\">Begin the exploration</router-link>\n        </div>\n    </div>\n</template>\n\n<style lang=\"sass\">\n    .intro__text\n        position: absolute\n        top: 50%\n        left: 50%\n        transform: translateX(-50%)\n        font-family: 'Mazius'\n        display: flex\n        flex-direction: column\n        align-items: center\n        h2\n            color: white\n            padding: 10px\n        .button\n            text-decoration: none\n            text-transform: uppercase\n            padding: 15px\n            border: 1px white solid\n            border-radius: 30px\n            color: white\n</style>\n\n<script>\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport * as Mouse from '../mouse.js'\n\nexport default {\n  name: 'Title',\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null,\n    }\n  },\n  methods: {\n    init: function() {\n        const container = document.querySelector('.container');\n        const canvas = document.querySelector('.main-canvas')\n\n        // Setup Scene\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 20000);\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: canvas\n        });\n\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.setPixelRatio(window.devicePixelRatio)\n\n        window.addEventListener(\"resize\", () => {\n            this.renderer.setSize(window.innerWidth, window.innerHeight)\n            this.renderer.setPixelRatio(window.devicePixelRatio)\n        })\n\n        let manager = new THREE.LoadingManager();\n        let textureLoader = new THREE.TextureLoader(manager)\n\n        var axesHelper = new THREE.AxesHelper( 1000 );\n        this.scene.add( axesHelper );\n\n        let m_cine = new THREE.MeshPhongMaterial({\n            color: 0xF01100,\n            specular: 0xfcd3d3,\n            shininess: 60,\n            flatShading: false\n        })\n        let m_fever = new THREE.MeshPhongMaterial({\n            color: 0xFFFFFF,\n            specular: 0xFFFFFF,\n            shininess: 60,\n            flatShading: false\n        })\n\n        let pointLight = new THREE.PointLight(0xffffff, 0.3, 100);\n        pointLight.position.x = 5\n        pointLight.position.y = 10\n        pointLight.position.z = 10\n        this.scene.add(pointLight);\n\n        let pointLight2 = new THREE.PointLight(0xffffff, 1, 100);\n        pointLight2.position.x = 7.8\n        pointLight2.position.y = 0\n        pointLight2.position.z = - 30\n        this.scene.add(pointLight2);\n\n        let ambientLight = new THREE.AmbientLight(0x696969)\n        this.scene.add(ambientLight);\n\n        const loader = new GLTFLoader();\n        loader.load(\n            '/title.glb',\n            (gltf) => {\n                // called when the resource is loaded\n                // console.log(gltf);\n\n                // pointing Mesh\n                this.cine = gltf.scene.children[0].children[2]\n                this.fever = gltf.scene.children[0].children[1]\n\n                // Overiding Material\n                this.cine.material = m_cine\n                this.fever.material = m_fever\n\n                this.cine.scale.set(0.023,0.023,0.01)\n                this.cine.position.set( 0, 0, 0 );\n                this.fever.scale.set(0.023,0.023,0.023)\n                this.fever.position.set( 9.6, 0, 0.2 );\n\n                // Add to scene\n                this.scene.add(this.cine, this.fever);\n            },\n        );\n\n        this.camera.position.set( 7.8, 0, 10 );\n        this.renderer.render(this.scene,this.camera)\n        container.appendChild(this.renderer.domElement);\n        this.animate()\n        },\n    animate: function() {\n        requestAnimationFrame(this.animate);\n        this.renderer.render(this.scene, this.camera);\n    },\n  },\n    mounted() {\n        this.init()\n    }\n}\n</script>\n"]}]}